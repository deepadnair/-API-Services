{
	"info": {
		"_postman_id": "dd04f0a7-ffeb-4b6e-b6c9-8985b823b099",
		"name": "Reqres",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//verify Status Code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Contains details of User Id : 7\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Michael\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n        \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Regurl}}/api/users/7",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"users",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "List User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//verify Status Code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Contains details of page: 2\", function () {\r",
							"    pm.expect(pm.response.text()).to.include( \"page\" & \"2\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Regurl}}/api/users?page=2\n",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"User 23 not found\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"23\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Regurl}}/api/users/{{id}}",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "RequestUnknown",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if details present for id\", function ()\r",
							" {\r",
							"    const bodyResponse = pm.response.text();\r",
							"  pm.expect(bodyResponse).to.include(\"2002\");\r",
							"    pm.expect(bodyResponse).to.include(\"true red\");\r",
							"    pm.expect(bodyResponse).to.include(\"#BF1932\");\r",
							"    pm.expect(bodyResponse).to.include(\"19-1664\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Regurl}}/api/unknown/{{id}}",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"unknown",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "RequestUnknown Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Regurl}}/api/unknown/{{id}}",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"unknown",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"New user is created\", function () {\r",
							"var jsonData = pm.response.json()\r",
							" console.log(jsonData.id)\r",
							"pm.environment.set(\"first_name\", jsonData.first_name);\r",
							"pm.environment.set(\"last_name\", jsonData.last_name);\r",
							"pm.environment.set(\"email\", jsonData.email);\r",
							"console.log(\"user Firstname is : \" + jsonData.first_name + \", Lastname :\" + jsonData.last_name +\"& Email :\" + jsonData.email);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n\"data\": {\r\n        \"id\": \"{{id}}\",\r\n         \"email\": \"{{email}}\",\r\n        \"first_name\": \"{{first_name}}\",\r\n        \"last_name\": \"{{last_name}}\",\r\n        \"avatar\": \"{{avatar}}\"\r\n    },\r\n    \"support\": {\r\n        \"url\": \"{{url}}\",\r\n        \"text\": \"{{text}}\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Regurl}}/api/users",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//Details check\r",
							"pm.test(\"New user is created\", function () {\r",
							"var jsonData = pm.response.json()\r",
							" console.log(jsonData.id)\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"pm.environment.set(\"job\", jsonData.job);\r",
							"console.log(\"user name is \" + jsonData.name + \", job is \" + jsonData.job);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"job\": \"{{job}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Regurl}}/api/users",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Details check\r",
							"pm.test(\"New user is created\", function () {\r",
							"var jsonData = pm.response.json()\r",
							" console.log(jsonData.id)\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"pm.environment.set(\"job\", jsonData.job);\r",
							"console.log(\"user name is \" + jsonData.name + \", job is Updated \" + jsonData.job);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"Resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Regurl}}/api/users/2",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Details check\r",
							"pm.test(\"New details are Updated\", function () {\r",
							"var jsonData = pm.response.json()\r",
							" console.log(jsonData.id)\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"pm.environment.set(\"job\", jsonData.job);\r",
							"console.log(\"user name is \" + jsonData.name + \", job is Updated \" + jsonData.job);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"job\": \"{{job}}\"\r\n   \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Regurl}}/api/users/{{id}}",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"    Console.log(\"User deleted\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Regurl}}/api/user/7",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"user",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Generated Registration id and Token verification\r",
							"\r",
							"pm.test(\"Body matches Registration id and token\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"4\");\r",
							"    pm.expect(pm.response.text()).to.include(\"QpwL5tke4Pnpja7X4\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Regurl}}/api/register",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Generated  Token verification\r",
							"\r",
							"pm.test(\"Body matches token\", function () { \r",
							"    pm.expect(pm.response.text()).to.include(\"QpwL5tke4Pnpja7X4\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Regurl}}/api/login",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//status code 400 Bad Request\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"//Error message\r",
							"\r",
							"pm.test(\"Body matches Error Message: Missing Password \", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Missing password\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Regurl}}/api/login",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Unsuccessfu,",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//status code 400 Bad Request\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"//Error message\r",
							"\r",
							"pm.test(\"Body matches Error Message: Missing email or username \", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Missing email or username\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Regurl}}/api/register",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delay Response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Regurl}}/api/users?delay=2",
					"host": [
						"{{Regurl}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "2"
						}
					]
				}
			},
			"response": []
		}
	]
}